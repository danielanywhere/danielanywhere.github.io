<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>Conversion Class</title><meta name="Title" content="Conversion" /><meta name="Help.Id" content="T:Html.Conversion" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="Html" /><meta name="guid" content="T_Html_Conversion" /><meta name="Description" content="Handles common forms of data conversion." /><meta name="tocFile" content="../toc/IDA.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div id="DocumentationTitle" class="level-item">Dan's Html Library</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a><a class="dropdown-item languageFilterItem" data-languageId="vb">VB</a><a class="dropdown-item languageFilterItem" data-languageId="asp">ASP.NET</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div id="ContentContainer" class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="Resizer" class="is-hidden"></div><div id="TopicContent" class="column content is-7"><h1>Conversion Class</h1><div class="summary">
            Handles common forms of data conversion.
            </div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Definition</h2><div id="IDBSection"><strong>Namespace:</strong> <a href="N_Html.htm">Html</a><br /><strong>Assembly:</strong> Html (in Html.dll) Version: 25.2822.3845<div class="codeSnippet" data-codeSnippetLanguage="cs"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs"><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">Conversion</span></code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="vb"><div class="codeHeader"><span class="codeHeaderTitle">VB</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-vb"><span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">Conversion</span></code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="asp"><div class="codeHeader"><span class="codeHeaderTitle">ASP.NET</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-plaintext">No code example is currently available or this language may not be supported.</code></pre></div></div><dl class="inheritanceHierarchy"><dt>Inheritance</dt><dd><a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <span class="selflink">Conversion</span></dd></dl></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Constructors</h2><div id="IDBEASection"><table id="ConstructorList" class="table is-hoverable"><tr><td><a href="M_Html_Conversion__ctor.htm">Conversion</a></td><td>Initializes a new instance of the <span class="selflink">Conversion</span> class</td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Methods</h2><div id="IDCEASection"><table id="MethodList" class="table is-hoverable"><tr><td><a href="M_Html_Conversion_CanConvertToBoolean.htm">CanConvertToBoolean</a></td><td>
            Return a value indicating whether the value can be converted to a
            Boolean Type.
            </td></tr><tr><td><a href="M_Html_Conversion_CanConvertToDateTime.htm">CanConvertToDateTime</a></td><td>
            Return a value indicating whether the value can be converted to a
            DateTime Type.
            </td></tr><tr><td><a href="M_Html_Conversion_CanConvertToDouble.htm">CanConvertToDouble</a></td><td>
            Return a value indicating whether the value can be converted to a
            Double.
            </td></tr><tr><td><a href="M_Html_Conversion_CanConvertToInt64.htm">CanConvertToInt64</a></td><td>
            Return a value indicating whether the value can be converted to an
            Int64 Type.
            </td></tr><tr><td><a href="M_Html_Conversion_CommonAdd.htm">CommonAdd</a></td><td>
            Return the result of addition for values 1 and 2.
            </td></tr><tr><td><a href="M_Html_Conversion_CommonAnd.htm">CommonAnd(<span id="LST85D8EE3E_0" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST85D8EE3E_1" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST85D8EE3E_2" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST85D8EE3E_3" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Return the result of AND for values 1 and 2.
            </td></tr><tr><td><a href="M_Html_Conversion_CommonAnd_1.htm">CommonAnd(<span id="LST85D8EE3E_4" data-languageSpecificText="cpp=array&lt;"></span>Char<span id="LST85D8EE3E_5" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST85D8EE3E_6" data-languageSpecificText="cpp=array&lt;"></span>Char<span id="LST85D8EE3E_7" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Return the result of AND for values 1 and 2.
            </td></tr><tr><td><a href="M_Html_Conversion_CommonAnd_2.htm">CommonAnd(Object, Object)</a></td><td>
            Return the result of AND for values 1 and 2.
            </td></tr><tr><td><a href="M_Html_Conversion_CommonAssign.htm">CommonAssign</a></td><td>
            Return assignment of value2 to the caller.
            </td></tr><tr><td><a href="M_Html_Conversion_CommonCompare.htm">CommonCompare</a></td><td>
            Return the result of comparison for values 1 and 2.
            </td></tr><tr><td><a href="M_Html_Conversion_CommonDivide.htm">CommonDivide</a></td><td>
            Return the result of division for values 1 and 2.
            </td></tr><tr><td><a href="M_Html_Conversion_CommonEquals.htm">CommonEquals</a></td><td>
            Compare two values and attempt to determine their Relative Equality.
            </td></tr><tr><td><a href="M_Html_Conversion_CommonGreater.htm">CommonGreater</a></td><td>
            Return the logical result of value1 &gt; value2.
            </td></tr><tr><td><a href="M_Html_Conversion_CommonGreaterEqual.htm">CommonGreaterEqual</a></td><td>
            Return the logical result of value1 &gt;= value2.
            </td></tr><tr><td><a href="M_Html_Conversion_CommonLess.htm">CommonLess</a></td><td>
            Return the logical result of value1 &lt; value2.
            </td></tr><tr><td><a href="M_Html_Conversion_CommonLessEqual.htm">CommonLessEqual</a></td><td>
            Return the logical result of value1 &lt;= value2.
            </td></tr><tr><td><a href="M_Html_Conversion_CommonModulus.htm">CommonModulus</a></td><td>
            Return the result of modulus for values 1 and 2.
            </td></tr><tr><td><a href="M_Html_Conversion_CommonMultiply.htm">CommonMultiply</a></td><td>
            Return the result of multiplication for values 1 and 2.
            </td></tr><tr><td><a href="M_Html_Conversion_CommonNot.htm">CommonNot</a></td><td>
            Return the result of AND NOT Operation for values 1 and 2.
            </td></tr><tr><td><a href="M_Html_Conversion_CommonNotEqual.htm">CommonNotEqual</a></td><td>
            Return a value indicating whether values 1 and 2 are not equal.
            </td></tr><tr><td><a href="M_Html_Conversion_CommonOr.htm">CommonOr(<span id="LST85D8EE3E_8" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST85D8EE3E_9" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST85D8EE3E_10" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST85D8EE3E_11" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Return the result of OR Operation for values 1 and 2.
            </td></tr><tr><td><a href="M_Html_Conversion_CommonOr_1.htm">CommonOr(<span id="LST85D8EE3E_12" data-languageSpecificText="cpp=array&lt;"></span>Char<span id="LST85D8EE3E_13" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST85D8EE3E_14" data-languageSpecificText="cpp=array&lt;"></span>Char<span id="LST85D8EE3E_15" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Return the result of OR Operation for values 1 and 2.
            </td></tr><tr><td><a href="M_Html_Conversion_CommonOr_2.htm">CommonOr(Object, Object)</a></td><td>
            Return the result of OR Operation for values 1 and 2.
            </td></tr><tr><td><a href="M_Html_Conversion_CommonShiftLeft.htm">CommonShiftLeft</a></td><td>
            Return the result of Shift Left Operation for values 1 and 2.
            </td></tr><tr><td><a href="M_Html_Conversion_CommonShiftRight.htm">CommonShiftRight</a></td><td>
            Return the result of Shift Right Operation for values 1 and 2.
            </td></tr><tr><td><a href="M_Html_Conversion_CommonSubtract.htm">CommonSubtract</a></td><td>
            Return the result of subtraction for values 1 and 2.
            </td></tr><tr><td><a href="M_Html_Conversion_CommonXor.htm">CommonXor(<span id="LST85D8EE3E_16" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST85D8EE3E_17" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST85D8EE3E_18" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST85D8EE3E_19" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Return the result of XOR for values 1 and 2.
            </td></tr><tr><td><a href="M_Html_Conversion_CommonXor_1.htm">CommonXor(<span id="LST85D8EE3E_20" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST85D8EE3E_21" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32)</a></td><td>
            Return the result of XOR for values 1 and 2.
            </td></tr><tr><td><a href="M_Html_Conversion_CommonXor_2.htm">CommonXor(<span id="LST85D8EE3E_22" data-languageSpecificText="cpp=array&lt;"></span>Char<span id="LST85D8EE3E_23" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST85D8EE3E_24" data-languageSpecificText="cpp=array&lt;"></span>Char<span id="LST85D8EE3E_25" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Return the result of XOR for values 1 and 2.
            </td></tr><tr><td><a href="M_Html_Conversion_CommonXor_3.htm">CommonXor(<span id="LST85D8EE3E_26" data-languageSpecificText="cpp=array&lt;"></span>Char<span id="LST85D8EE3E_27" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32)</a></td><td>
            Return the result of XOR for values 1 and 2.
            </td></tr><tr><td><a href="M_Html_Conversion_CommonXor_4.htm">CommonXor(Object, Object)</a></td><td>
            Return the result of Exclusive OR Operator for values 1 and 2.
            </td></tr><tr><td><a href="M_Html_Conversion_Compare.htm">Compare</a></td><td>
            Return the result of comparison for values 1 and 2.
            </td></tr><tr><td><a href="M_Html_Conversion_Concat.htm">Concat(<span id="LST85D8EE3E_28" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST85D8EE3E_29" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST85D8EE3E_30" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST85D8EE3E_31" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Return a concatenated version of values 1 and 2.
            </td></tr><tr><td><a href="M_Html_Conversion_Concat_1.htm">Concat(<span id="LST85D8EE3E_32" data-languageSpecificText="cpp=array&lt;"></span>Char<span id="LST85D8EE3E_33" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST85D8EE3E_34" data-languageSpecificText="cpp=array&lt;"></span>Char<span id="LST85D8EE3E_35" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Return a concatenated version of values 1 and 2.
            </td></tr><tr><td><a href="M_Html_Conversion_Concat_2.htm">Concat(<span id="LST85D8EE3E_36" data-languageSpecificText="cpp=array&lt;"></span>String<span id="LST85D8EE3E_37" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, String)</a></td><td>
            Return a concatenated version of values 1 and 2.
            </td></tr><tr><td><a href="M_Html_Conversion_Concat_3.htm">Concat(<span id="LST85D8EE3E_38" data-languageSpecificText="cpp=array&lt;"></span>String<span id="LST85D8EE3E_39" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST85D8EE3E_40" data-languageSpecificText="cpp=array&lt;"></span>String<span id="LST85D8EE3E_41" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Return a concatenated version of values 1 and 2.
            </td></tr><tr><td><a href="M_Html_Conversion_Copy.htm">Copy(<span id="LST85D8EE3E_42" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST85D8EE3E_43" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST85D8EE3E_44" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST85D8EE3E_45" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, UInt32)</a></td><td>
            Copy a value to a byte array.
            </td></tr><tr><td><a href="M_Html_Conversion_Copy_4.htm">Copy(DateTime, <span id="LST85D8EE3E_46" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST85D8EE3E_47" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, UInt32)</a></td><td>
            Copy a value to a byte array.
            </td></tr><tr><td><a href="M_Html_Conversion_Copy_6.htm">Copy(Double, <span id="LST85D8EE3E_48" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST85D8EE3E_49" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, UInt32)</a></td><td>
            Copy a value to a byte array.
            </td></tr><tr><td><a href="M_Html_Conversion_Copy_7.htm">Copy(Guid, <span id="LST85D8EE3E_50" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST85D8EE3E_51" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, UInt32)</a></td><td>
            Copy a value to a byte array.
            </td></tr><tr><td><a href="M_Html_Conversion_Copy_8.htm">Copy(Single, <span id="LST85D8EE3E_52" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST85D8EE3E_53" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, UInt32)</a></td><td>
            Copy a value to a byte array.
            </td></tr><tr><td><a href="M_Html_Conversion_Copy_9.htm">Copy(String, <span id="LST85D8EE3E_54" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST85D8EE3E_55" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, UInt32)</a></td><td>
            Copy a value to a byte array.
            </td></tr><tr><td><a href="M_Html_Conversion_Copy_11.htm">Copy(UInt16, <span id="LST85D8EE3E_56" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST85D8EE3E_57" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, UInt32)</a></td><td>
            Copy a value to a byte array.
            </td></tr><tr><td><a href="M_Html_Conversion_Copy_12.htm">Copy(UInt32, <span id="LST85D8EE3E_58" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST85D8EE3E_59" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, UInt32)</a></td><td>
            Copy a value to a byte array.
            </td></tr><tr><td><a href="M_Html_Conversion_Copy_13.htm">Copy(UInt64, <span id="LST85D8EE3E_60" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST85D8EE3E_61" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, UInt32)</a></td><td>
            Copy a value to a byte array.
            </td></tr><tr><td><a href="M_Html_Conversion_Copy_1.htm">Copy(<span id="LST85D8EE3E_62" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST85D8EE3E_63" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST85D8EE3E_64" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST85D8EE3E_65" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, UInt32, Boolean)</a></td><td>
            Copy a value to a byte array.
            </td></tr><tr><td><a href="M_Html_Conversion_Copy_2.htm">Copy(<span id="LST85D8EE3E_66" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST85D8EE3E_67" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST85D8EE3E_68" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST85D8EE3E_69" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, UInt32, Int32)</a></td><td>
            Copy a value to a byte array.
            </td></tr><tr><td><a href="M_Html_Conversion_Copy_5.htm">Copy(DateTime, <span id="LST85D8EE3E_70" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST85D8EE3E_71" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, UInt32, UInt32)</a></td><td>
            Copy a value to a byte array.
            </td></tr><tr><td><a href="M_Html_Conversion_Copy_10.htm">Copy(String, <span id="LST85D8EE3E_72" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST85D8EE3E_73" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, UInt32, Boolean)</a></td><td>
            Copy a value to a byte array.
            </td></tr><tr><td><a href="M_Html_Conversion_Copy_3.htm">Copy(<span id="LST85D8EE3E_74" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST85D8EE3E_75" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST85D8EE3E_76" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST85D8EE3E_77" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, UInt32, UInt32, UInt32)</a></td><td>
            Copy a value to a byte array.
            </td></tr><tr><td><a href="M_Html_Conversion_DefaultStringForType.htm">DefaultStringForType</a></td><td>
            Return the Default Value, represented as a string, for the specified
            Data Type.
            </td></tr><tr><td><a href="M_Html_Conversion_DefaultToForType.htm">DefaultToForType</a></td><td>
            Return the Default To(x) conversion name, represented as a string, for
            the specified Data Type.
            </td></tr><tr><td><a href="M_Html_Conversion_DefaultValueForType.htm">DefaultValueForType</a></td><td>
            Return the Default Value, represented in its natural form, for the
            specified Data Type.
            </td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)" target="_blank" rel="noopener noreferrer">Equals(Object)</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="M_Html_Conversion_Equals.htm">Equals(Object, Object)</a></td><td>
            Compare two values and attempt to determine their Relative Equality.
            </td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.finalize" target="_blank" rel="noopener noreferrer">Finalize</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="M_Html_Conversion_GetCommonType.htm">GetCommonType</a></td><td>
            Return the common type between the two specified items.
            </td></tr><tr><td><a href="M_Html_Conversion_GetCommonValue.htm">GetCommonValue</a></td><td>
            Return the caller's value, converted to the Target Type.
            </td></tr><tr><td><a href="M_Html_Conversion_GetGuid.htm">GetGuid</a></td><td>
            Return the guid portion of the caller's string.
            </td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.gethashcode" target="_blank" rel="noopener noreferrer">GetHashCode</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="M_Html_Conversion_GetNumber.htm">GetNumber</a></td><td>
            Return the number portion of the caller's string.
            </td></tr><tr><td><a href="M_Html_Conversion_GetSysType.htm">GetSysType(Object)</a></td><td>
            Return a SysType Enumeration member corresponding with the system type
            closest matching the caller-specified value.
            </td></tr><tr><td><a href="M_Html_Conversion_GetSysType_1.htm">GetSysType(Type)</a></td><td>
            Return a SysType Enumeration member corresponding with the system type
            specified by the caller.
            </td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.gettype" target="_blank" rel="noopener noreferrer">GetType</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="M_Html_Conversion_HasBaseType.htm">HasBaseType</a></td><td>
            Return a value indicating whether the specified Top Type has the
            specified Base Type.
            </td></tr><tr><td><a href="M_Html_Conversion_IsBinaryType.htm">IsBinaryType(SysType)</a></td><td>
            Determine whether or not the caller supplied Data Type has a binary
            value.
            </td></tr><tr><td><a href="M_Html_Conversion_IsBinaryType_1.htm">IsBinaryType(Type)</a></td><td>
            Determine whether or not the caller supplied Data Type has a binary
            value.
            </td></tr><tr><td><a href="M_Html_Conversion_IsDate.htm">IsDate</a></td><td>
            Determine whether or not the caller supplied value has a date
            constitution.
            </td></tr><tr><td><a href="M_Html_Conversion_IsNumeric.htm">IsNumeric</a></td><td>
            Determine whether or not the caller supplied value has a numeric value.
            </td></tr><tr><td><a href="M_Html_Conversion_IsNumericType_1.htm">IsNumericType(String)</a></td><td>
            Return a value indicating whether the specified value can be converted
            purely to a number without any loss of information.
            </td></tr><tr><td><a href="M_Html_Conversion_IsNumericType.htm">IsNumericType(SysType)</a></td><td>
            Determine whether or not the caller supplied Data Type has a numeric
            value.
            </td></tr><tr><td><a href="M_Html_Conversion_IsNumericType_2.htm">IsNumericType(Type)</a></td><td>
            Determine whether or not the caller supplied Data Type has a numeric
            value.
            </td></tr><tr><td><a href="M_Html_Conversion_IsSelfClosingTag.htm">IsSelfClosingTag</a></td><td>
            Return a value indicating whether the specified tag name is
            self-closing.
            </td></tr><tr><td><a href="M_Html_Conversion_IsTextType.htm">IsTextType</a></td><td>
            Return a value indicating whether the specified type is naturally a
            text type.
            </td></tr><tr><td><a href="M_Html_Conversion_IsXml.htm">IsXml</a></td><td>
            Return a value indicating whether the specified string is Xml.
            </td></tr><tr><td><a href="M_Html_Conversion_IsXmlEmbedded.htm">IsXmlEmbedded</a></td><td>
            Return a value indicating whether the specified string is embedded Xml.
            </td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone" target="_blank" rel="noopener noreferrer">MemberwiseClone</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="M_Html_Conversion_Not.htm">Not(UInt16)</a></td><td>
            Return the binary compliment of the specified value.
            </td></tr><tr><td><a href="M_Html_Conversion_Not_2.htm">Not(UInt32)</a></td><td>
            Return the binary compliment of the specified value.
            </td></tr><tr><td><a href="M_Html_Conversion_Not_4.htm">Not(UInt64)</a></td><td>
            Return the binary compliment of the specified value.
            </td></tr><tr><td><a href="M_Html_Conversion_Not_1.htm">Not(UInt16, UInt16)</a></td><td>
            Return the NAND result of values 1 and 2.
            </td></tr><tr><td><a href="M_Html_Conversion_Not_3.htm">Not(UInt32, UInt32)</a></td><td>
            Return the NAND result of values 1 and 2.
            </td></tr><tr><td><a href="M_Html_Conversion_Not_5.htm">Not(UInt64, UInt64)</a></td><td>
            Return the NAND result of values 1 and 2.
            </td></tr><tr><td><a href="M_Html_Conversion_NumberSuffix.htm">NumberSuffix(Int32)</a></td><td>
            Return the specified number, formatted with the appropriate suffix.
            </td></tr><tr><td><a href="M_Html_Conversion_NumberSuffix_1.htm">NumberSuffix(Int64)</a></td><td>
            Return the specified number, formatted with the appropriate suffix.
            </td></tr><tr><td><a href="M_Html_Conversion_Or.htm">Or(UInt16, UInt16)</a></td><td>
            Return the OR result of values 1 and 2.
            </td></tr><tr><td><a href="M_Html_Conversion_Or_1.htm">Or(UInt32, UInt32)</a></td><td>
            Return the OR result of values 1 and 2.
            </td></tr><tr><td><a href="M_Html_Conversion_Or_2.htm">Or(UInt64, UInt64)</a></td><td>
            Return the OR result of values 1 and 2.
            </td></tr><tr><td><a href="M_Html_Conversion_RoundDown.htm">RoundDown(Decimal)</a></td><td>
            Return an integer value, rounded down from a floating point value.
            </td></tr><tr><td><a href="M_Html_Conversion_RoundDown_1.htm">RoundDown(Double)</a></td><td>
            Return an integer value, rounded down from a floating point value.
            </td></tr><tr><td><a href="M_Html_Conversion_RoundDown_2.htm">RoundDown(Single)</a></td><td>
            Return an integer value, rounded down from a floating point value.
            </td></tr><tr><td><a href="M_Html_Conversion_RoundUp.htm">RoundUp(Double)</a></td><td>
            Return an integer value, rounded up from a floating point value.
            </td></tr><tr><td><a href="M_Html_Conversion_RoundUp_1.htm">RoundUp(Single)</a></td><td>
            Return an integer value, rounded up from a floating point value.
            </td></tr><tr><td><a href="M_Html_Conversion_TextNumber.htm">TextNumber</a></td><td>
            Return the binary value of the number expressed in text.
            </td></tr><tr><td><a href="M_Html_Conversion_TextNumberInline.htm">TextNumberInline</a></td><td>
            Return the string value with the verbose number converted to numerical
            digits.
            </td></tr><tr><td><a href="M_Html_Conversion_ToBoolean.htm">ToBoolean(Object)</a></td><td>
            Return the Boolean representation of a value.
            </td></tr><tr><td><a href="M_Html_Conversion_ToBoolean_1.htm">ToBoolean(String)</a></td><td>
            Return the Boolean representation of a value.
            </td></tr><tr><td><a href="M_Html_Conversion_ToByte.htm">ToByte</a></td><td>
            Return the byte found at the specified offset of the buffer.
            </td></tr><tr><td><a href="M_Html_Conversion_ToByteArray.htm">ToByteArray(Object)</a></td><td>
            Return a byte array, converted from an object.
            </td></tr><tr><td><a href="M_Html_Conversion_ToByteArray_2.htm">ToByteArray(String)</a></td><td>
            Convert a string to a byte array and return the byte array.
            </td></tr><tr><td><a href="M_Html_Conversion_ToByteArray_1.htm">ToByteArray(Object, UInt32)</a></td><td>
            Return a byte array, converted from an object.
            </td></tr><tr><td><a href="M_Html_Conversion_ToCamelCase.htm">ToCamelCase</a></td><td>
            Return a representation of the caller's string formatted as Camel Case
            text.
            </td></tr><tr><td><a href="M_Html_Conversion_ToChar.htm">ToChar</a></td><td>
            Return the Character Value specified by the caller's Int.
            </td></tr><tr><td><a href="M_Html_Conversion_ToDataType.htm">ToDataType</a></td><td>
            Convert the incoming value to the specified data type.
            </td></tr><tr><td><a href="M_Html_Conversion_ToDateTime_2.htm">ToDateTime(Object)</a></td><td>
            Return a value converted to DateTime, with no exception thrown in the
            case that the specified value is not valid.
            </td></tr><tr><td><a href="M_Html_Conversion_ToDateTime_3.htm">ToDateTime(String)</a></td><td>
            Return a value converted to DateTime, with no exception thrown in the
            case that the specified value is not valid.
            </td></tr><tr><td><a href="M_Html_Conversion_ToDateTime.htm">ToDateTime(<span id="LST85D8EE3E_78" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST85D8EE3E_79" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, UInt32)</a></td><td>
            Return the DateTime representation of bytes in the specified offset
            of the caller's buffer.
            </td></tr><tr><td><a href="M_Html_Conversion_ToDateTime_1.htm">ToDateTime(<span id="LST85D8EE3E_80" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST85D8EE3E_81" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, UInt32, UInt32)</a></td><td>
            Return a Date Time, converted from binary values at the specified
            offset within the buffer.
            </td></tr><tr><td><a href="M_Html_Conversion_ToDecimal.htm">ToDecimal(Object)</a></td><td>
            Return the Decimal representation of the specified object.
            </td></tr><tr><td><a href="M_Html_Conversion_ToDecimal_1.htm">ToDecimal(String, Decimal)</a></td><td>
            Return a number converted to Decimal, with no exception thrown in the
            case that the specified value is not valid.
            </td></tr><tr><td><a href="M_Html_Conversion_ToDouble_1.htm">ToDouble(Object)</a></td><td>
            Return a Double floating point value from the caller specified value.
            </td></tr><tr><td><a href="M_Html_Conversion_ToDouble.htm">ToDouble(<span id="LST85D8EE3E_82" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST85D8EE3E_83" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, UInt32)</a></td><td>
            Return a Double floating point value from the specified location in the
            buffer.
            </td></tr><tr><td><a href="M_Html_Conversion_ToDouble_2.htm">ToDouble(String, Double)</a></td><td>
            Return a number converted to Double, with no exception thrown in the
            case that the specified value is not valid.
            </td></tr><tr><td><a href="M_Html_Conversion_ToGuid.htm">ToGuid(<span id="LST85D8EE3E_84" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST85D8EE3E_85" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, UInt32)</a></td><td>
            Return a Guid value from the specified location in the buffer.
            </td></tr><tr><td><a href="M_Html_Conversion_ToGuid_1.htm">ToGuid(Object, Guid)</a></td><td>
            Return a Guid value from the specified object.
            </td></tr><tr><td><a href="M_Html_Conversion_ToGuid_2.htm">ToGuid(String, Guid)</a></td><td>
            Return a Guid value from the specified string.
            </td></tr><tr><td><a href="M_Html_Conversion_ToHex.htm">ToHex(Byte)</a></td><td>
            Return a string of byte values represented in Hexadecimal.
            </td></tr><tr><td><a href="M_Html_Conversion_ToHex_1.htm">ToHex(<span id="LST85D8EE3E_86" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST85D8EE3E_87" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, HexStyle)</a></td><td>
            Return a string of byte values represented in Hexadecimal.
            </td></tr><tr><td><a href="M_Html_Conversion_ToHex_2.htm">ToHex(Int32, HexStyle)</a></td><td>
            Return a hexadecimal string representing the caller-specified value.
            </td></tr><tr><td><a href="M_Html_Conversion_ToHex_3.htm">ToHex(Int64, HexStyle)</a></td><td>
            Return a hexadecimal string representing the caller-specified value.
            </td></tr><tr><td><a href="M_Html_Conversion_ToHex_4.htm">ToHex(String, HexStyle)</a></td><td>
            Return a string of byte values represented in Hexadecimal.
            </td></tr><tr><td><a href="M_Html_Conversion_ToInt32.htm">ToInt32(Object)</a></td><td>
            Return the Integer representation of the specified object.
            </td></tr><tr><td><a href="M_Html_Conversion_ToInt32_1.htm">ToInt32(String, Int32)</a></td><td>
            Return a number converted to Int32, with no exception thrown in the
            case that the specified value is not valid.
            </td></tr><tr><td><a href="M_Html_Conversion_ToInt32Positive.htm">ToInt32Positive</a></td><td>
            Return a number converted to a positive Int32, with no exception thrown
            in the case that the specified value is not valid.
            </td></tr><tr><td><a href="M_Html_Conversion_ToInt64.htm">ToInt64(Object)</a></td><td>
            Return the Integer representation of the specified object.
            </td></tr><tr><td><a href="M_Html_Conversion_ToInt64_1.htm">ToInt64(String, Int64)</a></td><td>
            Return a number converted to Int64, with no exception thrown in the
            case that the specified value is not valid.
            </td></tr><tr><td><a href="M_Html_Conversion_ToPluralText.htm">ToPluralText</a></td><td>
            Return the Plural Text version of the caller-supplied singular text.
            </td></tr><tr><td><a href="M_Html_Conversion_ToRegEx.htm">ToRegEx</a></td><td>
            Return a Regular Expression Pattern, converted from the caller's
            string.
            </td></tr><tr><td><a href="M_Html_Conversion_ToSingle_1.htm">ToSingle(Object)</a></td><td>
            Return the Single representation of the specified object.
            </td></tr><tr><td><a href="M_Html_Conversion_ToSingle.htm">ToSingle(<span id="LST85D8EE3E_88" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST85D8EE3E_89" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, UInt32)</a></td><td>
            Return a single floating point value from the specified location in the
            caller's buffer.
            </td></tr><tr><td><a href="M_Html_Conversion_ToSingle_2.htm">ToSingle(String, Single)</a></td><td>
            Return a number converted to Single, with no exception thrown in the
            case that the specified value is not valid.
            </td></tr><tr><td><a href="M_Html_Conversion_ToSocialSecurity.htm">ToSocialSecurity</a></td><td>
            Return a formatted value for the provided unformatted Social Security
            Number.
            </td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.tostring" target="_blank" rel="noopener noreferrer">ToString<span id="LST85D8EE3E_90" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="M_Html_Conversion_ToString.htm">ToString(<span id="LST85D8EE3E_91" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST85D8EE3E_92" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Return a string of byte values.
            </td></tr><tr><td><a href="M_Html_Conversion_ToString_4.htm">ToString(Object)</a></td><td>
            Return the formatted String representation of the specified value.
            </td></tr><tr><td><a href="M_Html_Conversion_ToString_1.htm">ToString(<span id="LST85D8EE3E_93" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST85D8EE3E_94" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, UInt32)</a></td><td>
            Return the String representation of bytes in the specified offset of
            the caller's buffer.
            </td></tr><tr><td><a href="M_Html_Conversion_ToString_5.htm">ToString(Object, String)</a></td><td>
            Return the formatted String representation of the specified value.
            </td></tr><tr><td><a href="M_Html_Conversion_ToString_2.htm">ToString(<span id="LST85D8EE3E_95" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST85D8EE3E_96" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, UInt32, Boolean)</a></td><td>
            Return the String representation of bytes in the specified offset
            of the caller's buffer.
            </td></tr><tr><td><a href="M_Html_Conversion_ToString_3.htm">ToString(<span id="LST85D8EE3E_97" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST85D8EE3E_98" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, UInt32, UInt32)</a></td><td>
            Return the String representation of bytes in the specified offset
            of the caller's buffer.
            </td></tr><tr><td><a href="M_Html_Conversion_ToTelephone.htm">ToTelephone</a></td><td>
            Return a formatted value for the provided unformatted Telephone Number.
            </td></tr><tr><td><a href="M_Html_Conversion_ToTimeSpan.htm">ToTimeSpan</a></td><td>
            Return a value converted to TimeSpan, with no exception thrown in the
            case that the specified value is not valid.
            </td></tr><tr><td><a href="M_Html_Conversion_ToTitleCase.htm">ToTitleCase</a></td><td>
            Return a representation of the caller's string formatted as Title Case
            text.
            </td></tr><tr><td><a href="M_Html_Conversion_ToUInt16.htm">ToUInt16</a></td><td>
            Return the Unsigned Integer representation of the bytes in the
            specified offset of the caller's buffer.
            </td></tr><tr><td><a href="M_Html_Conversion_ToUInt32_1.htm">ToUInt32(Object)</a></td><td>
            Return the Unsigned Integer representation of the specified object.
            </td></tr><tr><td><a href="M_Html_Conversion_ToUInt32.htm">ToUInt32(<span id="LST85D8EE3E_99" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST85D8EE3E_100" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, UInt32)</a></td><td>
            Return the Unsigned Integer representation of the bytes in the
            specified offset of the caller's buffer.
            </td></tr><tr><td><a href="M_Html_Conversion_ToUInt64_1.htm">ToUInt64(Object)</a></td><td>
            Return the Unsigned Integer representation of the specified object.
            </td></tr><tr><td><a href="M_Html_Conversion_ToUInt64.htm">ToUInt64(<span id="LST85D8EE3E_101" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST85D8EE3E_102" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, UInt32)</a></td><td>
            Return the Unsigned Integer representation of the bytes in the
            specified offset of the caller's buffer.
            </td></tr><tr><td><a href="M_Html_Conversion_ToValueOfType.htm">ToValueOfType(Object, SysType, Boolean)</a></td><td>
            Return the caller's value, casted to the specified destination value.
            </td></tr><tr><td><a href="M_Html_Conversion_ToValueOfType_1.htm">ToValueOfType(Object, Type, Boolean)</a></td><td>
            Return the caller's value, casted to the specified destination value.
            </td></tr><tr><td><a href="M_Html_Conversion_ToVerboseNumber.htm">ToVerboseNumber</a></td><td>
            Return a verbose (written) version of the caller-supplied numeric
            value.
            </td></tr><tr><td><a href="M_Html_Conversion_ToXmlContent.htm">ToXmlContent</a></td><td>
            Return an Xml inner String formatted for use as a standard Xml Object.
            </td></tr><tr><td><a href="M_Html_Conversion_ToXmlEmbedded.htm">ToXmlEmbedded(Object)</a></td><td>
            Return an Xml String formatted for embedded transport within
            a single element.
            </td></tr><tr><td><a href="M_Html_Conversion_ToXmlEmbedded_1.htm">ToXmlEmbedded(String)</a></td><td>
            Return an Xml String formatted for embedded transport within
            a single element.
            </td></tr><tr><td><a href="M_Html_Conversion_Xor.htm">Xor(UInt16, UInt16)</a></td><td>
            Return the XOR result of values 1 and 2.
            </td></tr><tr><td><a href="M_Html_Conversion_Xor_1.htm">Xor(UInt32, UInt32)</a></td><td>
            Return the XOR result of values 1 and 2.
            </td></tr><tr><td><a href="M_Html_Conversion_Xor_2.htm">Xor(UInt64, UInt64)</a></td><td>
            Return the XOR result of values 1 and 2.
            </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Events</h2><div id="IDAEASection"><table id="EventList" class="table is-hoverable"><tr><td><a href="E_Html_Conversion_RequestAreaCode.htm">RequestAreaCode</a></td><td>
            Fired when the local Telephone Area Code is needed.
            </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Reference</h4><div><a href="N_Html.htm">Html Namespace</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Definition</a></li><li><a class="quickLink">Constructors</a></li><li><a class="quickLink">Methods</a></li><li><a class="quickLink">Events</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>